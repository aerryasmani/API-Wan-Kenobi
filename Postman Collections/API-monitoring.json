{
	"info": {
		"_postman_id": "5d94dea9-00fc-4040-a156-d18c59662216",
		"name": "SWAPI Listing",
		"description": "This is a Automation API Testing for SWAPI (Star Wars API). For learning and implementing the monitoring the health API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "General Listing",
			"item": [
				{
					"name": "All Listing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "117aab87-c811-422d-b599-14530cc11817",
								"exec": [
									"console.log(pm.globals.get(\"Prod_URL\")); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9e207b67-c2ea-48a6-843d-8c119c9539c8",
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"if(pm.response.code === 200){\r",
									"    //is ok\r",
									"} else if (pm.response.code === 500){\r",
									"    if(pm.expect(pm.response.json().message).to.include(\"Error Processing Request\")){\r",
									"        //is ok\r",
									"    } else {\r",
									"       pm.expect.fail(\"Error 500\"); \r",
									"    }\r",
									"} else {\r",
									"    pm.expect.fail(\"statuscode not 200 or 500\");\r",
									"}\r",
									"});\r",
									"\r",
									"pm.test(\"Validate API Listing\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectedApiBody = {\r",
									"        \"people\": \"https://swapi.dev/api/people/\",\r",
									"        \"planets\": \"https://swapi.dev/api/planets/\",\r",
									"        \"films\": \"https://swapi.dev/api/films/\",\r",
									"        \"species\": \"https://swapi.dev/api/species/\",\r",
									"        \"vehicles\": \"https://swapi.dev/api/vehicles/\",\r",
									"        \"starships\": \"https://swapi.dev/api/starships/\"\r",
									"    };\r",
									"\r",
									"    // Iterate through each key in the expected API body and check the response\r",
									"    Object.keys(expectedApiBody).forEach(function(key) {\r",
									"        pm.expect(jsonData[key]).to.eql(expectedApiBody[key]);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "30982b35-4180-46e5-9176-ebaf76cdc1f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://swapi.dev/api/"
					},
					"response": []
				},
				{
					"name": "Listing Films",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e303351-3e43-4634-9e6b-7eb5c0c25f9e",
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"if(pm.response.code === 200){\r",
									"    //is ok\r",
									"} else if (pm.response.code === 500){\r",
									"    if(pm.expect(pm.response.json().message).to.include(\"Error Processing Request\")){\r",
									"        //is ok\r",
									"    } else {\r",
									"       pm.expect.fail(\"Error 500\"); \r",
									"    }\r",
									"} else {\r",
									"    pm.expect.fail(\"statuscode not 200 or 500\");\r",
									"}\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Movies Count\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(6);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Films API Listing\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectedTitles = [  // Fixed the array declaration\r",
									"        \"A New Hope\",\r",
									"        \"The Empire Strikes Back\",\r",
									"        \"Return of the Jedi\",\r",
									"        \"The Phantom Menace\",\r",
									"        \"Attack of the Clones\",\r",
									"        \"Revenge of the Sith\",\r",
									"    ];\r",
									"\r",
									"    // Iterate through each key in the expected API body and check the response\r",
									"    expectedTitles.forEach(function(title, index) {\r",
									"        pm.expect(jsonData.results[index].title).to.eql(title);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6877d802-23f6-4fd0-a711-2008ec953f0f",
								"exec": [
									"// Example: Set up an authorization header before sending the request\r",
									"pm.request.headers.add({\r",
									"    key: 'Authorization',\r",
									"    value: 'Bearer <your_token>'\r",
									"});\r",
									"\r",
									"// Example: Set up a dynamic variable for timestamp\r",
									"pm.environment.set(\"current_timestamp\", new Date().toISOString());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "21cdfcfd-6b2a-4d98-b0c7-4d2a74d888c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://swapi.dev/api/films"
					},
					"response": []
				}
			],
			"id": "f062c863-f09f-487f-a0fe-4e6f0ad6a5f1"
		}
	]
}
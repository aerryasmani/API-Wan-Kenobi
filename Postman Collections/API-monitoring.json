{
	"info": {
		"_postman_id": "5d94dea9-00fc-4040-a156-d18c59662216",
		"name": "SWAPI Listing",
		"description": "This is a Automation API Testing for SWAPI (Star Wars API).\n\nFor the purpose of :\n\n1. Learning and implementing the monitoring the health API.\n    \n2. Learning Javascript\n    \n3. Creating Test case for API related scenario",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Species",
			"item": [
				{
					"name": "Films",
					"item": [
						{
							"name": "Listing Films",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e303351-3e43-4634-9e6b-7eb5c0c25f9e",
										"exec": [
											"//Server Status\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verify General Structure\r",
											"pm.test(\"Response structure is valid\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Check top-level structure\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"    pm.expect(jsonData).to.have.property('count');\r",
											"    pm.expect(jsonData).to.have.property('next');\r",
											"    pm.expect(jsonData).to.have.property('previous');\r",
											"    pm.expect(jsonData).to.have.property('results').and.to.be.an('array');\r",
											"});\r",
											"\r",
											"//Verify Film Structure Count\r",
											"pm.test(\"Verify Film Structure Count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    // Validate each film in results\r",
											"    jsonData.results.forEach(function(film) {\r",
											"        pm.expect(film).to.have.property('title').and.to.be.a('string');\r",
											"        pm.expect(film).to.have.property('episode_id').and.to.be.a('number');\r",
											"        pm.expect(film).to.have.property('opening_crawl').and.to.be.a('string');\r",
											"        pm.expect(film).to.have.property('director').and.to.be.a('string');\r",
											"        pm.expect(film).to.have.property('producer').and.to.be.a('string');\r",
											"        pm.expect(film).to.have.property('release_date').and.to.be.a('string');\r",
											"        pm.expect(film).to.have.property('characters').and.to.be.an('array');\r",
											"        pm.expect(film).to.have.property('planets').and.to.be.an('array');\r",
											"        pm.expect(film).to.have.property('starships').and.to.be.an('array');\r",
											"        pm.expect(film).to.have.property('vehicles').and.to.be.an('array');\r",
											"        pm.expect(film).to.have.property('species').and.to.be.an('array');\r",
											"        pm.expect(film).to.have.property('created').and.to.be.a('string');\r",
											"        pm.expect(film).to.have.property('edited').and.to.be.a('string');\r",
											"        pm.expect(film).to.have.property('url').and.to.be.a('string');\r",
											"    });\r",
											"});\r",
											"\r",
											"//Verify Count Field\r",
											"pm.test(\"Verify Movies Count\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.count).to.eql(6);\r",
											"});\r",
											"\r",
											"//Verify API Format Structure\r",
											"pm.test(\"verify API Format Structure\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.results.forEach(function(film) {\r",
											"        pm.expect(film.url).to.match(/^https:\\/\\/swapi\\.dev\\/api\\/films\\/\\d+\\/$/);\r",
											"    });\r",
											"});\r",
											"\r",
											"//Verify Film in Result\r",
											"pm.test(\"Verify Films Listing\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var expectedTitles = [\r",
											"        \"A New Hope\",\r",
											"        \"The Empire Strikes Back\",\r",
											"        \"Return of the Jedi\",\r",
											"        \"The Phantom Menace\",\r",
											"        \"Attack of the Clones\",\r",
											"        \"Revenge of the Sith\",\r",
											"    ];\r",
											"\r",
											"    // Iterate through each key in the expected API body and check the response\r",
											"    expectedTitles.forEach(function(title, index) {\r",
											"        pm.expect(jsonData.results[index].title).to.eql(title);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6877d802-23f6-4fd0-a711-2008ec953f0f",
										"exec": [
											"console.log(pm.globals.get(\"Prod_URL\")); \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "21cdfcfd-6b2a-4d98-b0c7-4d2a74d888c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "https://swapi.dev/api/films"
							},
							"response": []
						}
					],
					"id": "60b8df9e-9627-4785-ac51-f88ac84542c6"
				},
				{
					"name": "Listing Species_Page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b581c63-633f-4788-ac66-32e16a71ec6a",
								"exec": [
									"//Server Status\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Verify General Structure\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check top-level structure\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('count');\r",
									"    pm.expect(jsonData).to.have.property('next');\r",
									"    pm.expect(jsonData).to.have.property('previous');\r",
									"    pm.expect(jsonData).to.have.property('results').and.to.be.an('array');\r",
									"});\r",
									"\r",
									"//Verify Species Structure Count\r",
									"pm.test(\"Verify Species Attribute Structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    // Validate each structure in results\r",
									"    jsonData.results.forEach(function(species) {\r",
									"        pm.expect(species).to.have.property('name').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('classification').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('designation').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('average_height').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('skin_colors').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('hair_colors').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('eye_colors').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('average_lifespan').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('homeworld').to.satisfy((val) => val === null || typeof val === 'string');\r",
									"        pm.expect(species).to.have.property('language').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('people').and.to.be.an('array');\r",
									"        pm.expect(species).to.have.property('films').and.to.be.an('array');\r",
									"        pm.expect(species).to.have.property('created').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('edited').and.to.be.a('string');\r",
									"        pm.expect(species).to.have.property('url').and.to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"//Verify Count Field\r",
									"pm.test(\"Verify Species Count\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(37);\r",
									"});\r",
									"\r",
									"//Verify API Format Structure\r",
									"pm.test(\"verify API Format Structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.results.forEach(function(film) {\r",
									"        pm.expect(film.url).to.match(/^https:\\/\\/swapi\\.dev\\/api\\/species\\/\\d+\\/$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"//Verify Species in Result\r",
									"pm.test(\"Verify Species Listing\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectedName= [\r",
									"        \"Human\",\"Droid\",\"Wookie\",\"Rodian\",\"Hutt\",\"Yoda's species\",\"Trandoshan\",\"Mon Calamari\",\"Ewok\",\"Sullustan\",\r",
									"    ];\r",
									"\r",
									"    // Iterate through each key in the expected API body and check the response\r",
									"    expectedName.forEach(function(name, index) {\r",
									"        pm.expect(jsonData.results[index].name).to.eql(name);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"//Verify Classification in Result\r",
									"pm.test(\"Verify Classification Listing\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectedClassification= [\r",
									"        \"Mammal\",\"artificial\",\"sentient\",\"gastropod\",\"reptile\",\"amphibian\",\r",
									"\r",
									"    // Iterate through each key in the expected API body and check the response\r",
									"    expectedClassification.forEach(function(classification, index) {\r",
									"        pm.expect(jsonData.results[index].classification).to.eql(classification);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"//Playground\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response contains expected fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property('count');\r",
									"    pm.expect(jsonData).to.have.property('results').that.is.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Correct number of results\", function () {\r",
									"    var resultsLength = jsonData.results.length;\r",
									"    pm.expect(resultsLength).to.be.at.most(10);\r",
									"    if (jsonData.next === null) {\r",
									"        console.log(\"This is the last page\");\r",
									"    } else {\r",
									"        pm.expect(resultsLength).to.equal(10);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Store total count for comparison across requests\r",
									"if (!pm.globals.has(\"totalCount\")) {\r",
									"    pm.globals.set(\"totalCount\", jsonData.count);\r",
									"    pm.globals.set(\"receivedCount\", 0);\r",
									"}\r",
									"\r",
									"pm.globals.set(\"receivedCount\", pm.globals.get(\"receivedCount\") + jsonData.results.length);\r",
									"\r",
									"console.log(\"Received so far: \" + pm.globals.get(\"receivedCount\") + \" out of \" + pm.globals.get(\"totalCount\"));\r",
									"\r",
									"if (jsonData.next === null) {\r",
									"    pm.test(\"Total received matches expected count\", function () {\r",
									"        pm.expect(pm.globals.get(\"receivedCount\")).to.equal(pm.globals.get(\"totalCount\"));\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "abe7bf11-674e-492d-b413-9ec5300bf812",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8957535f-b78d-45c7-b900-ec1e00a80506",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"strictSSL": true,
						"followOriginalHttpMethod": true,
						"insecureHTTPParser": false,
						"removeRefererHeaderOnRedirect": true,
						"disableCookies": true,
						"tlsPreferServerCiphers": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/species?page=1&size=4",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								"species"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Species_Page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76b81ace-91de-44cb-9601-bd389bb90346",
								"exec": [
									"//Server Status\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Verify Count Field\r",
									"pm.test(\"Verify Species Count\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(37);\r",
									"});\r",
									"\r",
									"//Verify Species in Result\r",
									"pm.test(\"Verify Species Listing\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectedName= [\r",
									"        \"Neimodian\",\"Gungan\",\"Toydarian\",\"Dug\",\"Twi'lek\",\"Aleena\",\"Vulptereen\",\"Xexto\",\"Toong\",\"Cerean\"\r",
									"    ];\r",
									"\r",
									"    // Iterate through each key in the expected API body and check the response\r",
									"    expectedName.forEach(function(name, index) {\r",
									"        pm.expect(jsonData.results[index].name).to.eql(name);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "cdf4cd31-fa78-4b4f-bda6-a426e23ec65e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/species?page=2",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								"species"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Species_Page 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abbb134c-cfb3-4ae3-94bb-c5434c79ac2a",
								"exec": [
									"//Server Status\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Verify Count Field\r",
									"pm.test(\"Verify Species Count\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(37);\r",
									"});\r",
									"\r",
									"//Verify Species in Result\r",
									"pm.test(\"Verify Species Listing\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectedName= [\r",
									"        \"Nautolan\",\"Zabrak\",\"Tholothian\",\"Iktotchi\",\"Quermian\", \"Kel Dor\",\"Chagrian\", \"Geonosian\", \"Mirialan\", \"Clawdite\", \r",
									"    ];\r",
									"\r",
									"    // Iterate through each key in the expected API body and check the response\r",
									"    expectedName.forEach(function(name, index) {\r",
									"        pm.expect(jsonData.results[index].name).to.eql(name);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ad321da1-b004-4c00-8298-987263782d2a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/species?page=3",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								"species"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Species_Page 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48775782-4c8a-46c3-b347-97ca53181a39",
								"exec": [
									"//Server Status\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Verify Count Field\r",
									"pm.test(\"Verify Species Count\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.count).to.eql(37);\r",
									"});\r",
									"\r",
									"//Verify Species in Result\r",
									"pm.test(\"Verify Species Listing\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectedName= [\r",
									"        \"Besalisk\", \"Kaminoan\",\"Skakoan\", \"Muun\", \"Togruta\", \"Kaleesh\", \"Pau'an\", \r",
									"    ];\r",
									"\r",
									"    // Iterate through each key in the expected API body and check the response\r",
									"    expectedName.forEach(function(name, index) {\r",
									"        pm.expect(jsonData.results[index].name).to.eql(name);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bfde7d77-9a62-4dd1-81bc-31302968bd07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/species?page=4",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								"species"
							],
							"query": [
								{
									"key": "page",
									"value": "4"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "4f4bf1cd-ae53-4f92-b299-d6f75d785af3"
		},
		{
			"name": "General Listing",
			"item": [
				{
					"name": "All Listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "190c2363-ec2d-4315-a8a3-1423e15cccc3",
								"exec": [
									"//Server Status\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Verify General Structure\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Check top-level structure\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('people');\r",
									"    pm.expect(jsonData).to.have.property('planets');\r",
									"    pm.expect(jsonData).to.have.property('films');\r",
									"    pm.expect(jsonData).to.have.property('species');\r",
									"    pm.expect(jsonData).to.have.property('vehicles');\r",
									"    pm.expect(jsonData).to.have.property('starships');\r",
									"});\r",
									"\r",
									"//Verify API Format Structure\r",
									"pm.test(\"verify API Format Structure\", function () {\r",
									"    var jsonData = pm.response.json(); // Moved the variable declaration to the top\r",
									"    const urlRegex = /^https:\\/\\/swapi\\.dev\\/api\\/[a-z]+\\/$/;\r",
									"    Object.values(jsonData).forEach(url => {\r",
									"        pm.expect(url).to.match(urlRegex);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Validate API Listing\", function () {\r",
									"    var jsonData = pm.response.json(); // Moved the variable declaration to the top\r",
									"    var expectedApiBody = {\r",
									"        \"people\": \"https://swapi.dev/api/people/\",\r",
									"        \"planets\": \"https://swapi.dev/api/planets/\",\r",
									"        \"films\": \"https://swapi.dev/api/films/\",\r",
									"        \"species\": \"https://swapi.dev/api/species/\",\r",
									"        \"vehicles\": \"https://swapi.dev/api/vehicles/\",\r",
									"        \"starships\": \"https://swapi.dev/api/starships/\"\r",
									"    };\r",
									"\r",
									"    // Iterate through each key in the expected API body and check the response\r",
									"    Object.keys(expectedApiBody).forEach(function(key) {\r",
									"        pm.expect(jsonData[key]).to.eql(expectedApiBody[key]);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9472a7fc-6333-41e3-aa0f-92fdeea52e21",
								"exec": [
									"console.log(pm.globals.get(\"Prod_URL\")); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "30982b35-4180-46e5-9176-ebaf76cdc1f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://swapi.dev/api/"
					},
					"response": []
				}
			],
			"id": "f062c863-f09f-487f-a0fe-4e6f0ad6a5f1"
		}
	]
}